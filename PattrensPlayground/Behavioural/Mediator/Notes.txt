Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it
lets you vary their interaction independently.
The Mediator Design Pattern is used to reduce the communication complexity between multiple
objects. This design pattern provides a mediator object and that mediator object normally handles
all the communication complexities between different objects.
The Mediator object acts as the communication center for all objects. That means when an object
needs to communicate to another object, then it does not call the other object directly, instead, it
calls the mediator object and it is the responsibility of the mediator object to route the message to
the destination object.


Mediator: It is an interface and it defines all possible interactions between colleagues.
ConcreteMediator: It is a class that implements the Mediator interface and coordinates
communication between colleague objects.
Colleague: It is an abstract class and this abstract class is going to be implemented by Concrete
Colleague classes.
ConcreteColleage1 / ConcreteColleage2: These are classes and implements the Colleague interface.
If a concrete colleague (let say ConcreteColleage1) wants to communicate with another concrete
colleague (let say ConcreteColleage2), they will not communicate directly instead they will
communicate via the ConcreteMediator.